name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: nothing
  ECS_SERVICE: backend
  ECS_CLUSTER: medusa

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Create task definition file
      run: |
        cat > task-definition.json << 'EOF'
        {
          "family": "ecs-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "512",
          "memory": "1024",
          "executionRoleArn": "arn:aws:iam::129794356202:role/medusa-task-execution-role",
          "containerDefinitions": [
            {
              "name": "backend-code",
              "image": "placeholder-will-be-updated",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 9000,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                { "name": "NODE_ENV", "value": "production" },
                { "name": "REDIS_HOST", "value": "redis" },
                { "name": "DB_HOST", "value": "postgres" },
                { "name": "POSTGRES_PASSWORD", "value": "mysecretpassword" }
              ]
            },
            {
              "name": "postgres",
              "image": "postgres",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 5432,
                  "protocol": "tcp"
                }
              ],
              "environment": [
                {
                  "name": "POSTGRES_PASSWORD",
                  "value": "mysecretpassword"
                }
              ]
            },
            {
              "name": "redis",
              "image": "redis",
              "essential": true,
              "portMappings": [
                {
                  "containerPort": 6379,
                  "protocol": "tcp"
                }
              ]
            }
          ]
        }
        EOF

    - name: Debug task definition
      run: |
        echo "Reviewing task definition content:"
        cat task-definition.json
        echo "Container definitions:"
        jq '.containerDefinitions[].name' task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: backend-code
        image: ${{ steps.build-image.outputs.image }}

    - name: Debug updated task definition
      run: |
        echo "Reviewing updated task definition content:"
        cat ${{ steps.task-def.outputs.task-definition }}
        echo "Container definitions:"
        jq '.containerDefinitions[].name' ${{ steps.task-def.outputs.task-definition }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
